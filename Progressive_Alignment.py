import Pairwise_Alignment
'''
def multiple_alignment(Seqlist1,Seqlist2,Seq_Weight,S):
    seql1 = Seqlist1.copy()
    seql2 = Seqlist2.copy()


def PROG_Align(Order_List,Seq_Weight,Seq_List):
    S_List = []
    for i in Order_List:
        if i == ['-','-']:
            S1 = S_List.pop(0)
            S2 = S_List.pop(0)
            len1 = max(len(S1),len(S1[0]))
            len2 = max(len(S2),len(S2[0]))
            S = [[0 for i in range(len1 + 1)] for j in range(len2 + 1)]
            S_List.append(S)
        elif (i[0] == '-' ) & (i[1] != '-'):
            S1 = S_List.pop(0)

        else:
            seq1 = Seq_List[i[0]]
            seq2 = Seq_List[i[1]]
            S = [[0 for i in range(len(seq1) + 1)] for j in range(len(seq2) + 1)]
            for m in range(1,len(seq2)):
                for n in range(1,len(seq1)):
                    S[m][n] = max(Score.BLOSUM62(seq2[m-1],seq1[n-1]),0)/2
            print(S)
            S_List.append(S)
'''
def Create_List_num(Seq_List):
    Num = {}
    Name_List = list(Seq_List.keys())
    count = 0
    for i in range(len(Name_List)):
        for j in range(i+1,len(Name_List)):
            Num[Name_List[i]+Name_List[j]] = count
            count += 1
    '''
    for i in Order_List:
        if i == ['-', '-']:
        elif (i[0] == '-') & (i[1] != '-'):
        else:
            seq1 = Seq_List[i[0]]
            seq2 = Seq_List[i[1]]
    '''
    return Num

def PROG_Align(Order_List,Seq_Weight,Seq_List,S_List,P_List,Num_List):
    TT = []
    SS = []
    PP = []
    for i in P_List:
        i.pop(-1)
        i.pop(-1)
    for i in Order_List:
        if i == ['-', '-']:
            continue
        elif (i[0] == '-') & (i[1] != '-'):
            Group = TT.pop(0)
            seq = Seq_List[i[1]]
            S_P = SS.pop(0)
            P_P = PP.pop(0)
            LEN = max(len(S_P),len(S_P[0]))
            S = [[0 for i in range(LEN)]for j in range(len(seq) + 1)]
            for i in range(1,len(S[0])):
                S[0][i] = S_P[P_P[i][0]][P_P[i][1]] + S_P[0][i] + S_P[i][0]
                S[i][0] = S_P[0][i]*len(Group)
            for i in range(1,len(S)):
                for j in range(1,len(S[0])):
                    S[i][j] = S_P[j][j]
                    for k in Group:
                        if Seq_List[k][j-1] == seq[j-1]:
                            S[i][j]+= max((S[i - 1][j - 1] + Pairwise_Alignment.NW_match), S[i - 1][j] + Pairwise_Alignment.NW_gap_penalty,
                              S[i][j - 1] + Pairwise_Alignment.NW_gap_penalty)
                        else:
                            S[i][j] -= max((S[i - 1][j - 1] + Pairwise_Alignment.NW_match), S[i - 1][j] + Pairwise_Alignment.NW_gap_penalty,
                              S[i][j - 1] + Pairwise_Alignment.NW_gap_penalty)
            print(S)

        else:
            Num = Num_List[i[0]+i[1]]
            S = S_List[Num]
            P = P_List[Num]
            SS.append(S.copy())
            PP.append(P.copy())
            TT.append(i)

OL = [['S1', 'S2'], ['-', 'S3'], ['-', 'S4']]
SW = {'S1': 0.21800000000000003, 'S2': 0.106, 'S3': 0.29200000000000004, 'S4': 0.222}
SL = {'S1': 'PYRFTIKSM', 'S2':'PYKFSIKSM' , 'S3': 'PYMYSSESM', 'S4': 'PMDDNPFSFQSM'}
S_L = [[[0, -2, -4, -6, -8, -10, -12, -14, -16, -18], [-2, 1, -1, -3, -5, -7, -9, -11, -13, -15], [-4, -1, 2, 0, -2, -4, -6, -8, -10, -12], [-6, -3, 0, 1, -1, -3, -5, -5, -7, -9], [-8, -5, -2, -1, 2, 0, -2, -4, -6, -8], [-10, -7, -4, -3, 0, 1, -1, -3, -3, -5], [-12, -9, -6, -5, -2, -1, 2, 0, -2, -4], [-14, -11, -8, -7, -4, -3, 0, 3, 1, -1], [-16, -13, -10, -9, -6, -5, -2, 1, 4, 2], [-18, -15, -12, -11, -8, -7, -4, -1, 2, 5]], [[0, -2, -4, -6, -8, -10, -12, -14, -16, -18], [-2, 1, -1, -3, -5, -7, -9, -11, -13, -15], [-4, -1, 2, 0, -2, -4, -6, -8, -10, -12], [-6, -3, 0, 1, -1, -3, -5, -7, -9, -9], [-8, -5, -2, -1, 0, -2, -4, -6, -8, -10], [-10, -7, -4, -3, -2, -1, -3, -5, -5, -7], [-12, -9, -6, -5, -4, -3, -2, -4, -4, -6], [-14, -11, -8, -7, -6, -5, -4, -3, -5, -5], [-16, -13, -10, -9, -8, -7, -6, -5, -2, -4], [-18, -15, -12, -11, -10, -9, -8, -7, -4, -1]], [[0, -2, -4, -6, -8, -10, -12, -14, -16, -18], [-2, 1, -1, -3, -5, -7, -9, -11, -13, -15], [-4, -1, 0, -2, -4, -6, -8, -10, -12, -12], [-6, -3, -2, -1, -3, -5, -7, -9, -11, -13], [-8, -5, -4, -3, -2, -4, -6, -8, -10, -12], [-10, -7, -6, -5, -4, -3, -5, -7, -9, -11], [-12, -9, -8, -7, -6, -5, -4, -6, -8, -10], [-14, -11, -10, -9, -6, -7, -6, -5, -7, -9], [-16, -13, -12, -11, -8, -7, -8, -7, -4, -6], [-18, -15, -14, -13, -10, -9, -8, -9, -6, -5], [-20, -17, -16, -15, -12, -11, -10, -9, -8, -7], [-22, -19, -18, -17, -14, -13, -12, -11, -8, -9], [-24, -21, -20, -19, -16, -15, -14, -13, -10, -7]], [[0, -2, -4, -6, -8, -10, -12, -14, -16, -18], [-2, 1, -1, -3, -5, -7, -9, -11, -13, -15], [-4, -1, 2, 0, -2, -4, -6, -8, -10, -12], [-6, -3, 0, 1, -1, -3, -5, -7, -9, -9], [-8, -5, -2, -1, 0, -2, -4, -6, -8, -10], [-10, -7, -4, -3, -2, 1, -1, -3, -5, -7], [-12, -9, -6, -5, -4, -1, 0, -2, -2, -4], [-14, -11, -8, -7, -6, -3, -2, -1, -3, -3], [-16, -13, -10, -9, -8, -5, -4, -3, 0, -2], [-18, -15, -12, -11, -10, -7, -6, -5, -2, 1]], [[0, -2, -4, -6, -8, -10, -12, -14, -16, -18], [-2, 1, -1, -3, -5, -7, -9, -11, -13, -15], [-4, -1, 0, -2, -4, -6, -8, -10, -12, -12], [-6, -3, -2, -1, -3, -5, -7, -9, -11, -13], [-8, -5, -4, -3, -2, -4, -6, -8, -10, -12], [-10, -7, -6, -5, -4, -3, -5, -7, -9, -11], [-12, -9, -8, -7, -6, -5, -4, -6, -8, -10], [-14, -11, -10, -9, -6, -7, -6, -5, -7, -9], [-16, -13, -12, -11, -8, -5, -7, -7, -4, -6], [-18, -15, -14, -13, -10, -7, -6, -8, -6, -5], [-20, -17, -16, -15, -12, -9, -8, -7, -8, -7], [-22, -19, -18, -17, -14, -11, -10, -9, -6, -8], [-24, -21, -20, -19, -16, -13, -12, -11, -8, -5]], [[0, -2, -4, -6, -8, -10, -12, -14, -16, -18], [-2, 1, -1, -3, -5, -7, -9, -11, -13, -15], [-4, -1, 0, 0, -2, -4, -6, -8, -10, -12], [-6, -3, -2, -1, -1, -3, -5, -7, -9, -11], [-8, -5, -4, -3, -2, -2, -4, -6, -8, -10], [-10, -7, -6, -5, -4, -3, -3, -5, -7, -9], [-12, -9, -8, -7, -6, -5, -4, -4, -6, -8], [-14, -11, -10, -9, -8, -7, -6, -5, -5, -7], [-16, -13, -12, -11, -10, -7, -6, -7, -4, -6], [-18, -15, -14, -13, -12, -9, -8, -7, -6, -5], [-20, -17, -16, -15, -14, -11, -10, -9, -8, -7], [-22, -19, -18, -17, -16, -13, -10, -11, -8, -9], [-24, -21, -20, -17, -18, -15, -12, -11, -10, -7]]]
P_L = [[[0, 0], [1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7], [8, 8], [9, 9], 5, 7], [[0, 0], [1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7], [8, 8], [9, 9], -1, 4], [[0, 0], [1, 1], [2, 1], [3, 1], [4, 1], [5, 2], [6, 3], [7, 4], [8, 5], [9, 6], [10, 7], [11, 8], [12, 9], -7, 4], [[0, 0], [1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7], [8, 8], [9, 9], 1, 5], [[0, 0], [1, 1], [2, 1], [3, 1], [4, 1], [5, 2], [6, 3], [7, 4], [8, 5], [9, 6], [10, 7], [11, 8], [12, 9], -5, 5], [[0, 0], [1, 1], [2, 1], [3, 1], [4, 1], [5, 2], [6, 3], [7, 4], [8, 5], [9, 6], [10, 7], [11, 8], [12, 9], -7, 4]]
NL = Create_List_num(SL)
PROG_Align(OL,SW,SL,S_L,P_L,NL)



